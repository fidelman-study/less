/*!Работа с селекторами, медиа-запросами и файлами*/
// ---------------Работа с селекторами, медиа-запросами и файлами-----------
// максимум 5 вложений
body {
	color: blue;
	background: blue;

	nav {
		margin: auto;
	}

	section {
		padding: 20px;
	}
}

// & - обращение к родительскому селектору
a {
	color: red;

	&:hover {
		color: black;
	}

	&.class {
		background: white;
	}

	li & {
		padding: 10px;
	}
}
// BEM
// & вся родительская ветвь
.wrap {
	&-remove,
	&-add {
		background: red;
	}

	&-remove {
		color: blue;
		
		&-left {
			text-align: left;
		}
	}

	&-add{
		color: yellow;
	}
}

// extend - наследование свойств
.container {
	color: red;
	background: blue;
}
.block:extend(.container){}
.frame {
	&:extend(.container);
	padding: 1px;
}

.class-1 {
	background: black;
}
.class-2 {
	color: white;
}
.class-3:extend(.class-1, .class-2){
}
// Псевдокласс :extend() умеет работать с:
// nth: :extend(:nth-child(n+3)).
// атрибутами: :extend([title=identifier]).
// псевдоклассами: :extend(link:visited:hover).
// псевдоэлементами: :extend(link:before).

// добавление в конструктор all все свойства этого класса, включая вложенные и псевдоклассы
.global-header {
	color: white;

	.area {
		background: red;
	}
}
.global-header:hover {
	color: red;
}
.global-footer:extend(.global-header all){}

.class {
	.two {
		@media (min-width: 999px) {
			display: none;
		}
		display: block;
	}
}

.one {
	@media (min-width: 500px) {
		color: red;
		.two {
			@media (max-width: 700px) {
				background: yellow;
			}
		}
	}
}

// группировка селекторов в медиазапросах не происходит
@media screen {
	.one {
		&:extend(.two, .three);
		margin: auto;
	}

	@media (min-width: 500px) {
		.two {
			color: white;
		}
	}
}
.three {
	background: red;
}

// группировка селекторов из вне медиазапросах возможна
@media screen {
	.one {
		background: #fff;
	}
	
	@media (min-width: 600px) {
		.two {
			color: red;
		}
	}
	
}
.three {
	&:extend(.one, .two);
}
// При импорте сторонних таблиц стилей, при указании формата .css - компилятор не будет его обрабатывать, если не указывать вообще либо .less - будет
// @import(less) - компилировать и конкатенировать в файл
// @import(css) - не компилировать и не конкатенировать
// @import(reference) - используется только при вызове extend()
// @import(less, online) - компилировать то, что less не понимает
// @import(multiple) - импортировать несколько раз один и тот же файл
// @import(optional) - не выводить ошибку если файл не найден

/*!Переменные и примеси*/
// -------------Переменные и примеси--------------
@color: red;
.block {
	color: @color;
}
@color1: #111;
@color2: #333;
// арифметические операции в скопках - строгий режим
.wrap {
	background: (@color1 + @color2);
}

// экранировние
.element {
  filter: e("ms:alwaysHasItsOwnSyntax.For.Stuff()");
}

// переменные объявленные ближе всего по локальности/глаболости важнее, а так же те, которые ниже

@element-height: 100px;
.element {
	@element-height: 200px;
	height: @element-height;
	&-footer {
		height: @element-height;
		@element-height: 300px;
		height: @element-height;
		@element-height: 400px;
	}
	@element-height: 500px;
}

// Интерполяция переменных - получение значение одной переменной в зависимости от других переменных
@icon-font-name:fontawesome-webfont;
@icon-font-path:"../fonts";
@font-face {
	font-family: "FontAwesome";
	src: url("@{icon-font-path}/@{icon-font-name}.eot?v=4.3.0");
}

@lang-prefix: site;
@lang-rus: rus;
@{lang-prefix}-@{lang-rus} {
	content: "@{lang-rus}";
}

@property: color;
html { 
	@{property}: red;
	background-@{property}: blue;
}

@color-prefix: color;
@color-grey: red;
body {
	color: e("@{@{color-prefix}-grey}");
}

// Примеси
.border(@color) {
	border: 20px solid @color;
}
html {
	.border(red);
}

.clearfix(@color: red) {
	&:before,
	&:after {
		content: "";
		display: table;
		color: @color;
	}
	&:after {
		clear: both;
	}
}
.navbar {
	.clearfix();
}
.transition (@function: ease, @duration: 2s, @property: all) {
	transition-timing-function: @function;
	transition-duration: @duration;
	transition-property: @property;
}
.link {
	.transition(@duration: 1s);
}
a {
	.transition(linear);
}

@global: 3;
.calc(@a: 1, @b: 2, @c: @global) {
	@d: @a+@b+@c;
	content: @d;
}
.test {
	.calc();
}

// @arguments - аргументы конструктора
// @rest - дополнительные переменные не указанные в конструкторе
.margin(@top: 2px, @right: 5px, @bottom: 10px, @left: 0, @rest...) {
	margin: @bottom;
	border: @rest;
}
body {
	.margin(2px, 5px, 1px, 0, 1px, solid, black);
}

.mixin(@color: #777) {
	color: @color;
}
.mixin(@color: #000, @border-radius: 3px) {
	color: @color;
	border-radius: @border-radius;
}
.text {
	.mixin();
}
.text {
	.mixin(red);
}

// Примеси как функции
.pxToEm(@value, @base: 16px) {
  @calcEm: (@value / @base) + 0em;
}
.class {
  .pxToEm(20px);
  content: @calcEm;
}

.selector {
	.mixin(@color: red) {
		color: @color;
	}
}
.button {
	.selector .mixin() !important;
}

// Набор правил

@classic: {
  color: #777;

  &.active {
    color: #000;
  }
};
.item {
  @classic();
}

.screen(@min, @max, @ruleset) {
	@media (min-width: @min) and (max-width: (@max - 1)) {
		@ruleset();
	}
}
.class {
	color: red;
	.screen(500px, 1200px, {
		color: white;
	});
}

// ----Операции со свойствами и встроенные функции---
/*!Операции со свойствами и встроенные функции*/

// слияние примесей происходит через + либо +_ перед :
.depth-bottom() {
	box-shadow+: 0 2px 5px 0 rgba(0,0,0,0.2);
}
.depth-top() {
	box-shadow+_: 0 2px 10px 0 rgba(0,0,0,0.4);
}
.block {
	.depth-bottom();
	.depth-top();
}

@string: "В этот замечательный день %a, я хочу сказать вам: %a";
@date: e("(17.01.2016)");
@message: В Less так много странных функций;
.block {
	content: %(@string, @date, @message);
}

.block {
	content: replace("В Less так много нужных функций", "нужных", "странных");
}

@list: 1 2 3;
.block {
	@currentStatus: e(extract(@list, 1));
	content: %("2-1=%a",@currentStatus);
	content: length(@list);
}

// Изображение

// to (top | right | bottom | left)
// комбинации: to top bottom | to right bottom и прочие
// ellipse
// ellipse at center
.gradient {
  background-image: svg-gradient(ellipse at center, blue, red 15%);
}
// Преобразование единицы измерения
// Длина: m, cm, mm, in, pt и pc.
// Время: s и ms.
// Углы: rad, deg, grad и turn.
.selector {
	content: convert(10rad, "deg");
}

.selector {
	content: unit(10px);
	content: get-unit(10px);
// isnumber(value)
// isstring(value)
// iscolor(value)
// iskeyword(value)
// isurl(value)
// ispixel(value)
// isem(value)
// ispercentage(value)
// isrulesetvalue()
	content: isunit(10rem, "rem");
}

// Округление значений
// Тригонометрические функции:
// sin(value)
// cosvalue)
// tan(value)
// Обратные тригонометрические функции:
// asin(value)
// acos(value)
// atan(value)
// Модуль числа, модуль между числами:
// abs(value)
// mod(valueOne, valueTwo)
// Работа со степенями (квадратный корень и степень):
// sqrt(value)
// pow(value, power) value в power степени
// Математические константы:
// pi()
.floor {
	content: floor(14.3);
}
.ceil {
	content: ceil(14.3);
}
.round {
	content: round(14.3123123, 3);
}
.percentage {
	content: percentage(1 / 4);
}

@list: 1 2 3 5 2;
.min {
	content: min(@list);
}
.max {
	content: max(@list);
}

// Функции цветового канала
// Для RGB:
// red()
// green()
// blue()
// Для HSL:
// hue()
// saturation()
// lightness()
// Для HSV:
// hsvhue()
// hsvsaturation()
// hsvvalue()
// Общие функции для RGB, HSL и HSV:
// aplha()
// luma()
// luminance()
@hsl: hsl(60, 40%, 50%);
.hsl {
	background: @hsl;
	// увеличить насыщенность цвета
	color: saturate(@hsl, 10%);
	// усменьшает насыщенность цвета
	background-color: desaturate(@hsl, 10%)
}

@hex: #333;
.hex {
	color: lighten(@hex, 10%);
	background: darken(@hex, 10%);
}

@fade: #333;
.fade {
	color: fade(@fade, 50%); //устанавливает прозрачность
	@fadein: fade(@fade, 50%);
	background: fadein(@fadein, 10%); //увеличивает прозрачность
	background: fadeout(@fadein, 10%); //уменьшает прозрачность
}
// значение отклонения угла тона (Hue)
.spin {
	color: hsl(200, 50%, 50%);
	background: spin(hsl(245, 50%, 50%), -45);
	
}

// mix - смешивание цветов в пропорциях
// contrast - нахождение контраста
.mix {
	color: mix(#fff, #000, 70%);
	background: contrast(#fff);
}
.convert {
	color: multiply(#fff, #000); // умножение
	background: screen(#fff, #000); // инвертирование
}

.difference {
	color: difference(#fff, #bbb); // разница
	background: exclusion(#fff, #bbb); // разница для низких контрастностей
	border-color: average(#fff, #eee); // средний
}

// условные оператор
.mixinif(@a, @b) when (@a > @b) {
	content: "@{a}";
}
.mixinifnot(@a, @b) when not (@a > @b) {
	background: "@{a}";
}
.mixinifand(@a, @b) when (@a > 1) and (@b > 1) { //вместо and - ,
	color: "@{a}+@{b}";
}
html {
	.mixinif(3,2);
	.mixinifnot(2,3);
	.mixinifand(2,2);
}

// true
.return-number(@number) when (isnumber(@number)) {
	content: @number;
}
// false
.return-number(@number) when (default()) {
	content: "Это не число";
}
.true {
	.return-number(123);
}
.fale {
	.return-number("A word");
}

.padding(@t: none, @r: none, @b: none, @l: none) {
	& when not (@t = none) {
		padding+_: @t; 
	}
	& when not (@r = none) {
		padding+_: @r; 
	}
	& when not (@b = none) {
		padding+_: @b; 
	}
	& when not (@l = none) {
		padding+_: @l; 
	}
}
.html {
	.padding(1px, 2px);
}


.mixinreturnNO(@a) { //@return не видно
	& when (@a = 1) {
		@return: value;
	}
}
.mixinreturn(@a) when (@a = 1) {
	@return: value;
}
.test {
	.mixinreturn(1);
	content: @return;
}

// Циклы
@column-name: col;
@column-count: 4;
.generate-column(@i: 1) when (@i =< @column-count) {
	.@{column-name}-@{i} {
		width: @i * (100% / @column-count);
	}
	.generate-column(@i + 1);
}
.generate-column();

@column-name: col;
@column-count: 4;
@column-prefix: xc, sm, md, lg;
.generate-class(@indexCount, @indexPrefix: 1) when (@indexPrefix =< @column-count) {
	@prefix: extract(@column-prefix, @indexPrefix);
	.@{column-name}-@{prefix}-@{indexCount} {
		width: @indexCount * (100% / @column-count);
	}
	.generate-class(@indexCount, @indexPrefix + 1);
}
.make-grid(@indexCount: 1) when (@indexCount =< @column-count) {
	.generate-class(@indexCount);
	.make-grid(@indexCount + 1);
}
.make-grid();

























